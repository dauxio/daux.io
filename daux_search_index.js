load_search_index({"pages":[{"title":"DAUX.IO","text":"Daux.io is a documentation generator that uses a simple folder structure and Markdown files to create custom documentation on the fly. It helps you create great looking documentation in a developer friendly way. #Features #For Authors Auto Generated Navigation \/ Page sorting Internal documentation links CommonMark compliant Auto created homepage\/landing page Multiple Output Formats Multiple Languages Support No Build Step Static Output Generation Table of Contents #For Developers Auto Syntax Highlighting Math, Diagrams and Flowcharts Extend Daux.io with Processors Full access to the internal API to create new pages programatically Work with pages metadata #For Marketing 100% Mobile Responsive 4 Built-In Themes or roll your own Functional, Flat Design Style Shareable\/Linkable SEO Friendly URLs Supports Google Analytics and Piwik Analytics #Installation and usage If you have PHP and Composer installed composer global require daux\/daux.io # Next to your `docs` folder, run daux generate Or if you wish to use Docker # Next to your `docs` folder, run docker run --rm -it -w \/build -v \"$PWD\":\/build daux\/daux.io daux generate","tags":"","url":"index.html"},{"title":"Getting Started","text":"Daux.io is an documentation generator that uses a simple folder structure and Markdown files to create custom documentation on the fly. It helps you create great looking documentation in a developer friendly way. Table of Contents Features For Authors For Developers For Marketing Demos Getting Started Install PHP and Composer Docker Writing pages See your pages Serving files Export to other formats Configuration Server Configuration Apache nginx PHP Requirements Extensions Support #Features #For Authors Auto Generated Navigation \/ Page sorting Internal documentation links CommonMark compliant Auto created homepage\/landing page Multiple Output Formats Multiple Languages Support No Build Step Static Output Generation Table of Contents #For Developers Auto Syntax Highlighting Math, Diagrams and Flowcharts Extend Daux.io with Processors Full access to the internal API to create new pages programatically Work with pages metadata #For Marketing 100% Mobile Responsive 4 Built-In Themes or roll your own Functional, Flat Design Style Shareable\/Linkable SEO Friendly URLs Supports Google Analytics and Piwik Analytics #Demos This is a list of sites using Daux.io: With a custom theme: Crafty Pixolution flow * Soisy Vulkan Tutorial 3Q With the default Theme Daux.io _ DoctrineWatcher _ DrupalGap ICADMIN: An admin panel powered by CodeIgniter. Munee: Standalone PHP 5.3 Asset Optimisation &amp; Manipulation Nuntius: A PHP framework for bots Do you use Daux.io? Send us a pull request or open an issue and I will add you to the list. #Getting Started #Install #PHP and Composer If you have PHP and Composer installed, you can install the dependency composer global require daux\/daux.io # Next to your `docs` folder, run daux generate You can then use the daux command line to generate your documentation. If the command isn\u2019t found, ensure your $PATH contains ~\/.composer\/vendor\/bin or ~\/.config\/composer\/vendor\/bin. #Docker Or if you wish to use Docker, the start of the command will be : docker run --rm -it -p 8085:8085 -w \/build -v \"$PWD\":\/build daux\/daux.io daux Any parameter valid in the PHP version is valid in the Docker version #Writing pages Creating new pages is very easy: Create a markdown file (*.md or *.markdown) Start writing By default, the generator will look for folders in the docs folder. Add your folders inside the docs folder. This project contains some example folders and files to get you started. You can nest folders any number of levels to get the exact structure you want. The folder structure will be converted to the nested navigation. You must use underscores instead of spaces. Here are some example file names and what they will be converted to: Good: 01_Getting_Started.md = Getting Started API_Calls.md = API Calls 200_Something_Else-Cool.md = Something Else-Cool _5_Ways_to_Be_Happy.md = 5 Ways To Be Happy Bad: File Name With Space.md = FAIL #See your pages Now you can see your pages. you have two options for that : serve them directly, or generate to various formats. We recommend the first one while you write your documentation, you get a much quicker feedback while writing. #Serving files You can use PHP\u2019s embedded web server by running the following command in the root of your documentation .\/serve Upload your files to an apache \/ nginx server and see your documentation More informations here #Export to other formats Daux.io is extendable and comes by default with three export formats: Export to HTML, same as the website, but can be hosted without PHP. Export all documentation in a single HTML page Upload to your Atlassian Confluence server. See a detailed feature comparison matrix To export, run the daux command and your documentation will be generated in static (you can change the destination with the --destination option) See here for all options #Configuration Now that you got the basics, you can also see what you can configure #Server Configuration We are using .mjs file types. Which not every web server properly understands and serves. You might see an error like Failed to load module script: Expected a JavaScript module script but the server responded with a MIME type of &quot;application\/octet-stream&quot;. Strict MIME type checking is enforced for module scripts per HTML spec. #Apache If you are using a version under 2.5.1 of Apache HTTPd. Add the following line within .htaccess, vhost or server configuration. AddType application\/javascript .mjs #nginx include mime.types; types { application\/javascript js mjs; } #PHP Requirements Daux.io is compatible with the officially supported PHP versions; 8.1.0 and up. #Extensions Daux.io needs the following PHP extensions to work : php-mbstring and php-xml. If you use non-english characters in your page names, it is recommended to install the php-intl extension as well. #Support If you need help using Daux.io, or have found a bug, please create an issue on the GitHub repo.","tags":"","url":"Getting_Started.html"},{"title":"Admonition","text":"Table of Contents Syntax Examples Notes Info Warning Danger Notes without titles Confluence #Syntax Admonitions are created using the following syntax: !!! type &quot;optional explicit title within double quotes&quot; Any number of other indented markdown elements. This is the second paragraph. Valid values for type are: note, info, warning, and danger. Any value other than these will be treated as note #Examples #Notes Note A note will render with a neutral color. Sugar Eggs Flour !!! note &quot;Note&quot; A `note` will render with a neutral color. * Sugar * Eggs * Flour #Info Some title info renders like this. !!! info &quot;Some title&quot; `info` renders like this. #Warning WARNING warning will warn you. With a blockquote !!! warning &quot;WARNING&quot; `warning` will warn you. &gt; With a blockquote #Danger Danger with &lt;code&gt; danger is Dangerous !!! danger &quot;Danger with `&lt;code&gt;`&quot; `danger` is Dangerous #Notes without titles This note has no title ! !!! note This note has no title ! #Confluence Confluence upload will convert admonition into confluence macros. note becomes an Info macro info becomes an Info macro warning becomes a Note macro danger becomes a Warning macro Everything that isn\u2019t recognized will be rendered as Info","tags":"","url":"Features\/Admonition.html"},{"title":"Auto Syntax Highlight","text":"With the help of highlight.js We can highlight more than 150 languages. To be precise, we support all languages supported by highlight.js 10.5.0. Note that fenced code blocks with a hardcoded language are rendered at build time and don\u2019t need the library to be loaded on the client side. Here is a quick example : HTML (with inline css and javascript) &lt;!DOCTYPE html&gt; &lt;title&gt;Title&lt;\/title&gt; &lt;style&gt;body {width: 500px;}&lt;\/style&gt; &lt;script type=&quot;application\/javascript&quot;&gt; function $init() {return true;} &lt;\/script&gt; &lt;body&gt; &lt;p checked class=&quot;title&quot; id='title'&gt;Title&lt;\/p&gt; &lt;!-- here goes the rest of the page --&gt; &lt;\/body&gt; See more examples of supported languages","tags":"","url":"Features\/Auto_Syntax_Highlight.html"},{"title":"Collapsible","text":"Collapsible sections can be done using standard HTML Click to expand! A numbered list With some Sub bullets &lt;details&gt; &lt;summary&gt;Click to expand!&lt;\/summary&gt; 1. A numbered 2. list * With some * Sub bullets &lt;\/details&gt;","tags":"","url":"Features\/Collapsible.html"},{"title":"CommonMark compliant","text":"As we support CommonMark, a broad range of markdown features is available to you. Many of the features shown below were known as Github Flavored Markdown. #We all like making lists The above header should be an H2 tag. Now, for a list of fruits: Red Apples Purple Grapes Green Kiwifruits Let\u2019s get crazy: This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. What about some code in a list? That\u2019s insane, right? In Ruby you can map like this: ['a', 'b'].map { |x| x.uppercase } In Rails, you can do a shortcut: ['a', 'b'].map(&amp;:uppercase) Some people seem to like definition lists #I am a robot Maybe you want to print robot to the console 1000 times. Why not? def robot_invasion puts(&quot;robot &quot; * 1000) end You see, that was formatted as code because it\u2019s been indented by four spaces. How about we throw some angle braces and ampersands in there? &lt;div class=&quot;footer&quot;&gt; &amp;copy; 2004 Foo Corporation &lt;\/div&gt; #Set in stone Preformatted blocks are useful for ASCII art: ,-. , ,-. ,-. \/ \\ ( )-( ) \\ | ,.>-( )-&lt; \\|,' ( )-( ) Y ___`-' `-' |\/__\/ `-' | | | -hrr- ___|_____________ #Playing the blame game If you need to blame someone, the best way to do so is by quoting them: I, at any rate, am convinced that He does not throw dice. Or perhaps someone a little less eloquent: I wish you\u2019d have given me this written question ahead of time so I could plan for it\u2026 I\u2019m sure something will pop into my head here in the midst of this press conference, with all the pressure of trying to come up with answer, but it hadn\u2019t yet\u2026 I don\u2019t want to sound like I have made no mistakes. I\u2019m confident I have. I just haven\u2019t - you just put me under the spot here, and maybe I\u2019m not as quick on my feet as I should be in coming up with one. #Table for two ID Name Rank 1 Tom Preston-Werner Awesome 2 Albert Einstein Nearly as awesome #Crazy linking action I get 10 times more traffic from Google than from Yahoo or MSN. #Images Here\u2019s an image from a file. It\u2019s also possible to use inline images. Note: to use images on a landing page (index.md), prefix the image URL with the name of the directory it appears in, omitting the numerical prefix used to order the sections. For example in this section, to display this image on the landing page (index.md), the URL for the image would be \u201cFeatures\/sampleimage.png\u201d to display the same image. View the source of this content.","tags":"","url":"Features\/CommonMark_compliant.html"},{"title":"Edit on GitHub links","text":"As you can see on the top of this page, you can add \u201cEdit on Github\u201d links to your pages, this feature can be enabled with a single parameter. The value has to be the path to the root of your documentation folder in your repository. In the value you see below, Daux\u2019s documentation is in the docs folder in the master branch. Daux.io will handle the rest { \"html\": { \"edit_on_github\": \"dauxio\/daux.io\/blob\/master\/docs\" } } #Edit on other VCS While GitHub is the most popular, it isn\u2019t the only, collaborative VCS out there. As long as you can refer your files by a URL, you can create an edit link for your VCS with the following configuration: { \"html\": { \"edit_on\": { \"name\": \"Bitbucket\", \"basepath\": \"https:\/\/bitbucket.org\/dauxio\/daux.io\/src\/master\/docs\" } } }","tags":"","url":"Features\/Edit_on_GitHub_links.html"},{"title":"Front Matter","text":"To customize your pages even further, you can add a Front Matter to your files. Front Matter is a block you add at the top of your file and looks like this: --- title: Hallo Welt keywords: &quot;Hallo, Hello, Welt, World, Erde, Earth&quot; author: German Daux.io Team date: 12th December 1984 --- #Changing the title If your file is named \u201cHello_World_de.md\u201d and your front matter is the one displayed above, you will get a page named \u201cHallo Welt\u201d #Search Engine Optimization For a better SEO experience you can change the description, keywords and author meta tags. #For Developers You can then access this information in each Content with $content-&gt;getAttributes() or with $page['attributes'] in a template.","tags":"","url":"Features\/Front_Matter.html"},{"title":"Internal links","text":"You can create links from a page to an other, the link is then resolved to the real page. Each relative link in your pages will be resolved to a page or content within the documentation. If the link\u2019s destination isn\u2019t found, the page generation will fail. Any valid markdown link is a valid Daux.io link. If your file structure looks like this: \u251c\u2500\u2500 00_Getting_Started.md \u251c\u2500\u2500 01_Features \u2502 \u251c\u2500\u2500 CommonMark_compliant.md \u251c\u2500\u2500 02_Examples \u2502 \u251c\u2500\u2500 Hello_World.md \u2502 \u251c\u2500\u2500 05_Code_Highlighting.md From the page 01_Features\/CommonMark_compliant.md, all the following links would be valid: [Getting Started](..\/00_Getting_Started.md) [Getting Started](..\/00_Getting_Started.html) [Getting Started](..\/00_Getting_Started) [Getting Started](..\/Getting_Started) \/\/ A link starting with \/ means root of the documentation, not the server it will be served from. [Getting Started](\/Getting_Started.html) [Getting Started](\/Getting_Started) \/\/ These Will first be searched for in the current directory and then start at the root of the documentation [Getting Started](Getting_Started) [Getting Started](00_Getting_Started) [Hello World](..\/02_Examples\/Hello_World.md) [Hello World](..\/02_Examples\/Hello_World.html) [Hello World](..\/02_Examples\/Hello_World) [Hello World](..\/Examples\/Hello_World) [Hello World](\/02_Examples\/Hello_World.md) [Hello World](Examples\/Hello_World) [Hello World](02_Examples\/Hello_World) #Github publishing If you plan to publish your documentation on Github along with your source code, we recommend to only use relative links with full names. From the list of links above only these two will work both on Github and on Daux.io [Getting Started](..\/00_Getting_Started.md) [Hello World](..\/02_Examples\/Hello_World.md)","tags":"","url":"Features\/Internal_links.html"},{"title":"Landing page","text":"If you want to create a beautiful landing page for your project, create a _index.md file in the root of the \/docs folder. This file will then be used to create a landing page. You can also add a tagline and image to this page using the config file like this: { \"title\": \"Daux.io\", \"tagline\": \"The Easiest Way To Document Your Project\", \"image\": \"app.png\" } The image can be a local or remote image. By default, the path is relative to the root of the documentation. To disable the automatic landing page, you can set auto_landing to false in the html section of your configuration { \"html\": { \"auto_landing\": false } }","tags":"","url":"Features\/Landing_page.html"},{"title":"Live mode","text":"Keep in mind, this mode can be used for production, but it is not recommended. The whole directory must be scanned on each request. This might not make a big impact on small documentations but can be a bottleneck on bigger ones. #Running Locally There are several ways to run the docs locally. You can use something like MAMP or WAMP. The easiest is to use PHP\u2019s built-in server. For that i\u2019ve included a short command, run daux serve in the projects folder to start the local web server. By default the server will run at: http:\/\/localhost:8085 #Running Remotely #Clean URLs configuration Daux provides native support for Clean URLs provided the webserver has its URL Rewrite module enabled. To enable the same, set the toggle in the config.json file in the \/docs folder. { \"live\": { \"clean_urls\": true } } #Apache Copy the files from the repo to a web server that can run PHP 8.1.0 or newer. There is an included .htaccess for Apache web server. You can follow this tutorial for install apache on Ubuntu\/Debian. #Nginx Daux.io works perfectly fine on Nginx too, just drop this configuration in your nginx.conf You can follow this tutorial for install nginx on Ubuntu\/Debian. server { listen 8085; server_name localhost; index index.html index.php; charset utf-8; root \/var\/www\/docs; location \/ { if (!-e $request_filename){ rewrite ^(.*)$ \/index.php$1; } } location ~ \\.php { fastcgi_split_path_info ^(.+\\.php)(\/.+)$; fastcgi_pass unix:\/var\/run\/php5-fpm.sock; #fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; } } #IIS If you have set up a local or remote IIS web site, you may need a web.config with: A rewrite configuration, for handling clean urls. A mime type handler for less files, if using a custom theme. #Clean URLs The web.config needs an entry for &lt;rewrite&gt; under &lt;system.webServer&gt;: &lt;configuration&gt; &lt;system.webServer&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;rule name=\"Main Rule\" stopProcessing=\"true\"&gt; &lt;match url=\".*\" \/&gt; &lt;conditions logicalGrouping=\"MatchAll\"&gt; &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" \/&gt; &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" \/&gt; &lt;\/conditions&gt; &lt;action type=\"Rewrite\" url=\"index.php\" appendQueryString=\"false\" \/&gt; &lt;\/rule&gt; &lt;\/rules&gt; &lt;\/rewrite&gt; &lt;\/system.webServer&gt; &lt;\/configuration&gt; To use clean URLs on IIS 6, you will need to use a custom URL rewrite module, such as URL Rewriter. #Docker This is not meant for production use, but you can bundle your documentation in Daux\u2019s docker container FROM daux\/daux.io WORKDIR \/daux\/ COPY docs\/ \/daux\/docs\/ EXPOSE 80 ENTRYPOINT [ &quot;php&quot;, &quot;-S&quot;, &quot;0.0.0.0:80&quot;, &quot;index.php&quot; ] When you add this to a Dockerfile and run docker build --name my-daux-doc . and then docker --rm run -p 8000:80 my-daux-doc You can access your documentation at localhost:8000","tags":"","url":"Features\/Live_mode.html"},{"title":"Math, Diagrams and Flowcharts","text":"Table of Contents Math Diagrams and Flowcharts Flow Sequence Gantt Class State Pie Journey #Math TeX expressions are rendered via KaTex. c = \\\\pm\\\\sqrt{a^2 + b^2}\\\\in\\\\RR ```tex c = \\\\pm\\\\sqrt{a^2 + b^2}\\\\in\\\\RR ``` x = a_0 + \\cfrac{1}{a_1 + \\cfrac{1}{a_2 + \\cfrac{1}{a_3+\\cdots}}} ```tex x = a_0 + \\cfrac{1}{a_1 + \\cfrac{1}{a_2 + \\cfrac{1}{a_3+\\cdots}}} ``` #Diagrams and Flowcharts You can render Diagrams and Flowcharts using mermaid #Flow graph TD A[Hard] --&gt;|Text| B(Round) B --&gt; C{Decision} C --&gt;|One| D[Result 1] C --&gt;|Two| E[Result 2] ```mermaid graph TD A[Hard] --&gt;|Text| B(Round) B --&gt; C{Decision} C --&gt;|One| D[Result 1] C --&gt;|Two| E[Result 2] ``` #Sequence sequenceDiagram Alice-&gt;&gt;John: Hello John, how are you? loop Healthcheck John-&gt;&gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--&gt;&gt;Alice: Great! John-&gt;&gt;Bob: How about you? Bob--&gt;&gt;John: Jolly good! ```mermaid sequenceDiagram Alice-&gt;&gt;John: Hello John, how are you? loop Healthcheck John-&gt;&gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--&gt;&gt;Alice: Great! John-&gt;&gt;Bob: How about you? Bob--&gt;&gt;John: Jolly good! ``` #Gantt gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ``` #Class classDiagram Class01 &lt;|-- AveryLongClass : Cool &lt;&lt;interface&gt;&gt; Class01 Class09 --&gt; C2 : Where am i? Class09 --* C3 Class09 --|&gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { &lt;&lt;service&gt;&gt; int id size() } ```mermaid classDiagram Class01 &lt;|-- AveryLongClass : Cool &lt;&lt;interface&gt;&gt; Class01 Class09 --&gt; C2 : Where am i? Class09 --* C3 Class09 --|&gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { &lt;&lt;service&gt;&gt; int id size() } ``` #State stateDiagram-v2 [*] --&gt; Still Still --&gt; [*] Still --&gt; Moving Moving --&gt; Still Moving --&gt; Crash Crash --&gt; [*] ```mermaid stateDiagram-v2 [*] --&gt; Still Still --&gt; [*] Still --&gt; Moving Moving --&gt; Still Moving --&gt; Crash Crash --&gt; [*] ``` #Pie pie &quot;Dogs&quot; : 386 &quot;Cats&quot; : 85 &quot;Rats&quot; : 15 ```mermaid pie &quot;Dogs&quot; : 386 &quot;Cats&quot; : 85 &quot;Rats&quot; : 15 ``` #Journey journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me ```mermaid journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me ```","tags":"","url":"Features\/Math_Diagrams_Flowcharts.html"},{"title":"Multilanguage","text":"You can handle multiple languages in your documentation, each with it\u2019s own navigation. Add this to your config.json : { \"languages\": { \"en\": \"English\", \"de\": \"German\" } } You will the need separate directories for each language in docs\/ folder. \u251c\u2500\u2500 docs\/ \u2502 \u251c\u2500\u2500 _index.md \u2502 \u251c\u2500\u2500 en \u2502 \u2502 \u251c\u2500\u2500 00_Getting_Started.md \u2502 \u2502 \u251c\u2500\u2500 01_Examples \u2502 \u2502 \u2502 \u251c\u2500\u2500 01_CommonMark_compliant.md \u2502 \u2502 \u2502 \u251c\u2500\u2500 05_Code_Highlighting.md \u2502 \u2502 \u251c\u2500\u2500 05_More_Examples \u2502 \u2502 \u2502 \u251c\u2500\u2500 Hello_World.md \u2502 \u2502 \u2502 \u251c\u2500\u2500 05_Code_Highlighting.md \u2502 \u251c\u2500\u2500 de \u2502 \u2502 \u251c\u2500\u2500 00_Getting_Started.md \u2502 \u2502 \u251c\u2500\u2500 01_Examples \u2502 \u2502 \u2502 \u251c\u2500\u2500 01_CommonMark_compliant.md \u2502 \u2502 \u2502 \u251c\u2500\u2500 05_Code_Highlighting.md \u2502 \u2502 \u251c\u2500\u2500 05_More_Examples \u2502 \u2502 \u2502 \u251c\u2500\u2500 Hello_World.md \u2502 \u2502 \u2502 \u251c\u2500\u2500 05_Code_Highlighting.md","tags":"","url":"Features\/Multilanguage.html"},{"title":"Multiple Output Formats","text":"Daux.io is extendable and comes by default with three export formats: Export to HTML Export all documentation in a single HTML page Upload to your Atlassian Confluence server #Feature Matrix Feature HTML Single Page HTML Confluence Index Pages \u221a \u221a \u221a Internal Links \u221a \u221a \u221a Landing Pages \u221a N\/A X Code Highlight \u221a \u221a \u221a (Using macros) Math, Diagrams, Flowcharts \u221a X \u221a (Using HTML macro) Live Mode \u221a N\/A N\/A Multilanguage \u221a X N\/A Pages Ordering \u221a \u221a X (Limited by API) Admonitions \u221a \u221a \u221a Collapsible Blocks \u221a \u221a \u221a Dark Mode \u221a X X Google \/ Piwik analytics \u221a \u221a \u221a (Configured on Conflence) #Confluence Example You can see this documentation uploaded to Confluence : https:\/\/dauxio.atlassian.net\/wiki\/spaces\/DOC\/overview","tags":"","url":"Features\/Multiple_Output_Formats.html"},{"title":"Navigation and Sorting","text":"#Navigation The navigation is generated automatically with all pages that end with .md or .markdown You can have as many sub levels as you wish. By default, a folder will have no index page. if you wish to have one defined all you need to do is add an index.md file to the folder. For example, \/docs\/02_Examples has a landing page for that section since there exists a \/docs\/02_Examples\/index.md file. #Sorting To sort your files and folders in a specific way, you can prefix them with a number and underscore, e.g. \/docs\/01_Hello_World.md and \/docs\/05_Features.md. This will list Hello World before Features, overriding the default alpha-numeric sorting. The numbers will be stripped out of the navigation and urls. For the file 6 Ways to Get Rich, you can use \/docs\/_6_Ways_to_Get_Rich.md You might also wish to stick certain links to the bottom of a page. You can do so by prefixing the file name with a \u2018-\u2019, e.g. a new file \/docs\/-Contact_Us.md will always appear at the bottom of the current list. Weights can also be added to further sort the bottom entries. e.g. \/docs\/-01_Coming.md will appear before \/docs\/-02_Soon.md but both will only appear after all positive or non-weighted files. It works the same for files prefixed with +. Page order priorities are like this: + in front of the filename and numbers in front + in front of the filename The index page Numbers in the front Pages without prefix - in front of the filename and numbers in front - in front of the filename","tags":"","url":"Features\/Navigation_and_Sorting.html"},{"title":"Search","text":"Searching in a Daux.io documentation is possible, but only in static mode. We don\u2019t provide this feature in live rendering as it would be too slow. To enable the generated search, you can set search to true in the html section of your configuration { \"html\": { \"search\": true } }","tags":"","url":"Features\/Search.html"},{"title":"Static Site Generation","text":"If you don\u2019t want to serve the live version of your site, you can also generate files, these can be one of the three supported formats : HTML output Single page HTML output Atlassian Confluence upload Generating a complete set of pages, with navigation daux --destination=[Output Directory Relative Direction] #Options For more options, run daux generate --help #Specify the configuration file #Specify the format Valid options are html, confluence or html-file. You can also add your own formats through Processors daux --format=html #Specify a processor A processor can be specified through the --processor option, this should be the name of a class inside the Todaymade\\Daux\\Extension namespace. By running : daux --processor=Processor Daux will be looking for Todaymade\\Daux\\Extension\\Processor inside the daux folder. You can try to run this command, we added a small example Processor. #Specify the source By default, the source is taken from the docs_directory configuration value in global.json but you can override it here. daux --source=docs_to_generate The path can be absolute or relative #Specify the destination By default the destination is static daux --destination=generated_docs The path can be absolute or relative","tags":"","url":"Features\/Static_Site_Generation.html"},{"title":"Table of contents","text":"Adding a table of contents becomes very easy with Daux.io #Manual Add [TOC] anywhere in your document and it will be replaced by a table of contents. You can add it more than once in a page. #Automatic Works only for html mode A table of contents can be added automatically to all pages. If [TOC] isn\u2019t present it will add it at the beginning of the page. You can enable this feature in your configuration { \"html\": { \"auto_toc\": true } }","tags":"","url":"Features\/Table_of_contents.html"},{"title":"Examples","text":"#This is a landing page for the Examples section Adding a landing page is pretty simple, all you need to do is add an \u201cindex.md\u201d file to the related folder.","tags":"","url":"Examples\/index.html"},{"title":"Code Highlighting","text":"Highlight.js highlights syntax in code examples on blogs, forums and in fact on any web pages. It\u2019s very easy to use because it works automatically: finds blocks of code, detects a language, highlights it. Learn more. You can even use Github Flavored Markdown We also use the scrivo\/highlight.php package to highlight on rendering when possible. Highlight.js is a powerful but heavy library, since we don\u2019t know which languages you\u2019ll use we included all of them. The good news is; if you use a fenced code block (```) with the language defined, the rendering is done on server side and entirely skips loading Highlight.js on the page. While still having the same end-result on your code. Table of Contents Python Python\u2019s profiler output Ruby Haml Perl PHP Scala Go XML HTML (with inline css and javascript) Lasso Markdown AsciiDoc Django templates Handlebars CSS SCSS JSON JavaScript CoffeeScript ActionScript VB.NET HTTP Lua AppleScript Delphi Java C++ Objective C Vala C F D RenderMan RSL RenderMan RIB MEL (Maya Embedded Language) GLSL SQL SmallTalk Lisp Clojure Ini file Apache nginx Diff DOS batch files Bash CMake Axapta Oracle Rules Language 1\u0421 AVR Assembler VHDL Parser 3 TeX Haskell Erlang Erlang REPL Rust Matlab R Mizar #Python @requires_authorization def somefunc(param1='', param2=0): r'''A docstring''' if param1 &gt; param2: # interesting print 'Gre\\'ater' return (param2 - param1 + 1) or None class SomeClass:&lt;br&gt; pass &gt;&gt;&gt; message = '''interpreter ... prompt''' #Python\u2019s profiler output 261917242 function calls in 686.251 CPU seconds ncalls tottime filename:lineno(function) 152824 513.894 {method 'sort' of 'list' objects} 129590630 83.894 rrule.py:842(__cmp__) 129590630 82.439 {cmp} 153900 1.296 rrule.py:399(_iter) 304393\/151570 0.963 rrule.py:102(_iter_cached) #Ruby class A &lt; B; def self.create(object = User) object end end class Zebra; def inspect; &quot;X#{2 + self.object_id}&quot; end end module ABC::DEF include Comparable # @param test # @return [String] nothing def foo(test) Thread.new do |blockvar| ABC::DEF.reverse(:a_symbol, :'a symbol', :&lt;=&gt;, 'test' + test) end.join end def [](index) self[index] end def ==(other) other == self end end anIdentifier = an_identifier Constant = 1 render action: :new #Haml !!! XML %html %body %h1.jumbo{:id=&gt;&quot;a&quot;, :style=&gt;'font-weight: normal', :title=&gt;title} highlight.js \/html comment -# ignore this line %ul(style='margin: 0') -items.each do |i| %i= i = variable =variable2 ~ variable3 ~variable4 The current year is #{DataTime.now.year}. #Perl # loads object sub load { my $flds = $c-&gt;db_load($id,@_) || do { Carp::carp &quot;Can`t load (class: $c, id: $id): '$!'&quot;; return undef }; my $o = $c-&gt;_perl_new(); $id12 = $id \/ 24 \/ 3600; $o-&gt;{'ID'} = $id12 + 123; #$o-&gt;{'SHCUT'} = $flds-&gt;{'SHCUT'}; my $p = $o-&gt;props; my $vt; $string =~ m\/^sought_text$\/; $items = split \/\/, 'abc'; for my $key (keys %$p) { if(${$vt.'::property'}) { $o-&gt;{$key . '_real'} = $flds-&gt;{$key}; tie $o-&gt;{$key}, 'CMSBuilder::Property', $o, $key; } } $o-&gt;save if delete $o-&gt;{'_save_after_load'}; return $o; } =head1 NAME POD till the end of file #PHP require_once 'Zend\/Uri\/Http.php'; abstract class URI extends BaseURI { \/** * Returns a URI * * @return URI *\/ static public function _factory($stats = array(), $uri = 'http') { $uri = explode(':', $uri, 0b10); $schemeSpecific = isset($uri[1]) ? $uri[1] : ''; $desc = 'Multi line description'; \/\/ Security check if (!ctype_alnum($scheme)) { throw new Zend_Uri_Exception('Illegal scheme'); } return [ 'uri' =&gt; $uri, 'value' =&gt; null, ]; } } __halt_compiler () ; datahere datahere datahere *\/ datahere #Scala object abstractTypes extends Application { abstract class SeqBuffer { type T; val element: Seq[T]; def length = element.length } } \/** Turn command line arguments to uppercase *\/ object Main { def main(args: Array[String]) { val res = for (a &lt;- args) yield a.toUpperCase println(&quot;Arguments: &quot; + res.toString) } } \/** Maps are easy to use in Scala. *\/ object Maps { val colors = Map(&quot;red&quot; -&gt; 0xFF0000, &quot;turquoise&quot; -&gt; 0x00FFFF, &quot;black&quot; -&gt; 0x000000, &quot;orange&quot; -&gt; 0xFF8040, &quot;brown&quot; -&gt; 0x804000) def main(args: Array[String]) { for (name &lt;- args) println( colors.get(name) match { case Some(code) =&gt; name + &quot; has code: &quot; + code case None =&gt; &quot;Unknown color: &quot; + name } ) } } #Go package main import ( &quot;fmt&quot; &quot;rand&quot; &quot;os&quot; ) const ( Sunday = iota Partyday numberOfDays \/\/ this constant is not exported ) type Foo interface { FooFunc(int, float32) (complex128, []int) } \/\/ simple comment type Bar struct { os.File \/* multi line comment *\/ PublicData chan int } func main() { ch := make(chan int) ch &lt;- 1 x, ok := &lt;- ch ok = true x = nil float_var := 1.0e10 defer fmt.Println('\\'') defer fmt.Println(`exitting now\\`) var fv1 float64 = 0.75 go println(len(&quot;hello world!&quot;)) return } #XML &lt;?xml version=&quot;1.0&quot;?&gt; &lt;response value=&quot;ok&quot; xml:lang=&quot;en&quot;&gt; &lt;text&gt;Ok&lt;\/text&gt; &lt;comment html_allowed=&quot;true&quot;\/&gt; &lt;ns1:description&gt;&lt;![CDATA[ CDATA is &lt;not&gt; magical. ]]&gt;&lt;\/ns1:description&gt; &lt;a&gt;&lt;\/a&gt; &lt;a\/&gt; &lt;\/response&gt; #HTML (with inline css and javascript) &lt;!DOCTYPE html&gt; &lt;title&gt;Title&lt;\/title&gt; &lt;style&gt;body {width: 500px;}&lt;\/style&gt; &lt;script type=&quot;application\/javascript&quot;&gt; function $init() {return true;} &lt;\/script&gt; &lt;body&gt; &lt;p checked class=&quot;title&quot; id='title'&gt;Title&lt;\/p&gt; &lt;!-- here goes the rest of the page --&gt; &lt;\/body&gt; #Lasso &lt;?LassoScript \/* Lasso 8 *\/ local('query' = 'SELECT * FROM `'+var:'table'+'` WHERE `id` &gt; 10 ORDER BY `Name` LIMIT 30'); Inline: -Username=$DBuser, -Password=$DBpass, -Database=$DBname, -sql=#query; var(&quot;class.name&quot; = (found_count != 0 ? `subtotal` | `nonefound`)); records; output: ?&gt;&lt;tr&gt;[loop_count]&lt;\/tr&gt;&lt;?=; \/records; \/Inline; ?&gt;&lt;div class=&quot;[$class.name]&quot;&gt;[found_count]&lt;\/div&gt; [noprocess] causes [delimiters] to be skipped until the next [\/noprocess] &lt;?lasso \/* Lasso 9 *\/ define strings_combine(value::string, ...other)::string =&gt; { local(result = #value-&gt;append(#other-&gt;asString)) return #result } \/**! descriptive text *\/ define person =&gt; type { data name::string, protected nickname data birthdate::date data private ssn = null public showName() =&gt; return .'name' protected fullName() =&gt; '&quot;' + .nickname + '&quot;' + .'name' public ssnListed =&gt; .ssn ? true | false } define person-&gt;name=(value) =&gt; { .'name' = #value return self-&gt;'name' } \/\/ query expression with n in array(-1, 0xABCD, 3.14159e14) let swapped = pair(#n-&gt;second, #n-&gt;first) group #swapped by #n-&gt;first into t let key = #t-&gt;key order by #key select pair(#key, #t) do {^ #n-&gt;upperCase ^} ?&gt; #Markdown # hello world you can write text [with links](http:\/\/example.com). * one _thing_ has *em*phasis * two __things__ are **bold** --- hello world =========== &lt;this_is inline=&quot;xml&quot;&gt;&lt;\/this_is&gt; &gt; markdown is so cool so are code segments 1. one thing (yeah!) 2. two thing `i can write code`, and `more` wipee! #AsciiDoc Hello, World! ============ Author Name, &lt;author@domain.foo&gt; you can write text http:\/\/example.com[with links], optionally using an explicit link:http:\/\/example.com[link prefix]. * single quotes around a phrase place 'emphasis' ** alternatively, you can put underlines around a phrase to add _emphasis_ * astericks around a phrase make the text *bold* * pluses around a phrase make it +monospaced+ - escape characters are supported - you can escape a quote inside emphasized text like 'here\\'s johnny!' term:: definition another term:: another definition \/\/ this is just a comment Let's make a break. ''' \/\/\/\/ we'll be right with you after this brief interruption. \/\/\/\/ == We're back! Want to see a image::images\/tiger.png[Tiger]? .Nested highlighting ++++ &lt;this_is inline=&quot;xml&quot;&gt;&lt;\/this_is&gt; ++++ ____ asciidoc is so powerful. ____ another quote: [quote, Sir Arthur Conan Doyle, The Adventures of Sherlock Holmes] ____ When you have eliminated all which is impossible, then whatever remains, however improbable, must be the truth. ____ Getting Literal --------------- want to get literal? prefix a line with a space. .... I'll join that party, too. .... . one thing (yeah!) . two thing `i can write code`, and `more` wipee! NOTE: AsciiDoc is quite cool, you should try it. #Django templates {% if articles|length %} {% for article in articles %} {# Striped table #} &lt;tr class=&quot;{% cycle odd,even %}&quot;&gt; &lt;td&gt;{{ article|default:&quot;Hi... &quot;|escape }}&lt;\/td&gt; &lt;td {% if article.today %}class=&quot;today&quot;{% endif %}&gt;{{ article.date|date:&quot;d.m.Y&quot; }}&lt;\/td&gt; &lt;\/tr&gt; {% endfor %} {% endif %} {% comment %} Comments may be long and multiline. {% endcomment %} #Handlebars &lt;h3&gt;Hours&lt;\/h3&gt; &lt;ul&gt; {{#each content.users}} &lt;li {{bindAttr hello=&quot;world&quot;}}&gt;{{firstName}}&lt;\/li&gt; {{\/each}} &lt;\/ul&gt; #CSS @media screen and (-webkit-min-device-pixel-ratio: 0) { body:first-of-type pre::after { content: 'highlight: ' attr(class); } body { background: linear-gradient(45deg, blue, red); } } @import url('print.css'); @page:right { margin: 1cm 2cm 1.3cm 4cm; } @font-face { font-family: Chunkfive; src: url('Chunkfive.otf'); } div.text, #content, li[lang=ru] { font: Tahoma, Chunkfive, sans-serif; background: url('hatch.png') \/* wtf? *\/; color: #F0F0F0 !important; width: 100%; } #SCSS @import &quot;compass\/reset&quot;; \/\/ variables $colorGreen: #008000; $colorGreenDark: darken($colorGreen, 10); @mixin container { max-width: 980px; } \/\/ mixins with parameters @mixin button($color:green) { @if ($color == green) { background-color: #008000; } @else if ($color == red) { background-color: #B22222; } } button { @include button(red); } div, .navbar, #header, input[type=&quot;input&quot;] { font-family: &quot;Helvetica Neue&quot;, Arial, sans-serif; width: auto; margin: 0 auto; display: block; } .row-12 &gt; [class*=&quot;spans&quot;] { border-left: 1px solid #B5C583; } \/\/ nested definitions ul { width: 100%; padding: { left: 5px; right: 5px; } li { float: left; margin-right: 10px; .home { background: url('http:\/\/placehold.it\/20') scroll no-repeat 0 0; } } } .banner { @extend .container; } a { color: $colorGreen; &amp;:hover { color: $colorGreenDark; } &amp;:visited { color: #c458cb; } } @for $i from 1 through 5 { .span#{$i} { width: 20px*$i; } } @mixin mobile { @media screen and (max-width : 600px) { @content; } } #JSON [ { &quot;title&quot;: &quot;apples&quot;, &quot;count&quot;: [12000, 20000], &quot;description&quot;: {&quot;text&quot;: &quot;...&quot;, &quot;sensitive&quot;: false} }, { &quot;title&quot;: &quot;oranges&quot;, &quot;count&quot;: [17500, null], &quot;description&quot;: {&quot;text&quot;: &quot;...&quot;, &quot;sensitive&quot;: false} } ] #JavaScript function $initHighlight(block, flags) { try { if (block.className.search(\/\\bno\\-highlight\\b\/) != -1) return processBlock(block, true, 0x0F) + ' class=&quot;&quot;'; } catch (e) { \/* handle exception *\/ var e4x = &lt;div&gt;Example &lt;p&gt;1234&lt;\/p&gt;&lt;\/div&gt;; } for (var i = 0 \/ 2; i &lt; classes.length; i++) { \/\/ &quot;0 \/ 2&quot; should not be parsed as regexp if (checkCondition(classes[i]) === undefined) return \/\\d+[\\s\/]\/g; } } #CoffeeScript # Divisions x = 6\/foo\/i x = 6 \/foo x = 6 \/ foo x = 6 \/foo * 2\/gm x = f \/foo x = f \/ foo \/ gm x = f \/foo * 2\/6 # Regexps x = f \/6 * 2\/ - 3 x = f \/foo * 2\/gm x = if true then \/\\n\/ else \/[.,]+\/ grade = (student, period=(if b? then 7 else 6), messages={&quot;A&quot;: &quot;Excellent&quot;}) -&gt; if student.excellentWork &quot;A+&quot; else if student.okayStuff if student.triedHard then &quot;B&quot; else &quot;B-&quot; else &quot;C&quot; square = (x) -&gt; x * x two = -&gt; 2 math = root: Math.sqrt square: square cube: (x) -&gt; x * square x race = (winner, runners...) -&gt; print winner, runners class Animal extends Being constructor: (@name) -&gt; move: (meters) -&gt; alert @name + &quot; moved #{meters}m.&quot; hi = `function() { return [document.title, &quot;Hello JavaScript&quot;].join(&quot;: &quot;); }` heredoc = &quot;&quot;&quot; CoffeeScript subst test #{ 010 + 0xf \/ 0b10 + &quot;nested string #{ \/\\n\/ }&quot;} &quot;&quot;&quot; ### CoffeeScript Compiler v1.2.0 Released under the MIT License ### OPERATOR = \/\/\/ ^ ( ?: [-=]&gt; # function ) \/\/\/ #ActionScript package org.example.dummy { import org.dummy.*; \/*define package inline interface*\/ public interface IFooBarzable { public function foo(... pairs):Array; } public class FooBar implements IFooBarzable { static private var cnt:uint = 0; private var bar:String; \/\/constructor public function TestBar(bar:String):void { bar = bar; ++cnt; } public function foo(... pairs):Array { pairs.push(bar); return pairs; } } } #VB.NET Import System Import System.IO #Const DEBUG = True Namespace Highlighter.Test ''' &lt;summary&gt;This is an example class.&lt;\/summary&gt; Public Class Program Protected Shared hello As Integer = 3 Private Const ABC As Boolean = False #Region &quot;Code&quot; ' Cheers! &lt;STAThread()&gt; _ Public Shared Sub Main(ByVal args() As String, ParamArray arr As Object) Handles Form1.Click On Error Resume Next If ABC Then While ABC : Console.WriteLine() : End While For i As Long = 0 To 1000 Step 123 Try System.Windows.Forms.MessageBox.Show(CInt(&quot;1&quot;).ToString()) Catch ex As Exception ' What are you doing? Well... Dim exp = CType(ex, IOException) REM ORZ Return End Try Next Else Dim l As New System.Collections.List&lt;String&gt;() SyncLock l If TypeOf l Is Decimal And l IsNot Nothing Then RemoveHandler button1.Paint, delegate End If Dim d = New System.Threading.Thread(AddressOf ThreadProc) Dim a = New Action(Sub(x, y) x + y) Static u = From x As String In l Select x.Substring(2, 4) Where x.Length &gt; 0 End SyncLock Do : Laugh() : Loop Until hello = 4 End If End Sub #End Region End Class End Namespace #HTTP POST \/task?id=1 HTTP\/1.1 Host: example.org Content-Type: application\/json; charset=utf-8 Content-Length: 19 {&quot;status&quot;: &quot;ok&quot;, &quot;extended&quot;: true} #Lua --[[ Simple signal\/slot implementation ]] local signal_mt = { __index = { register = table.insert } } function signal_mt.__index:emit(... --[[ Comment in params ]]) for _, slot in ipairs(self) do slot(self, ...) end end local function create_signal() return setmetatable({}, signal_mt) end -- Signal test local signal = create_signal() signal:register(function(signal, ...) print(...) end) signal:emit('Answer to Life, the Universe, and Everything:', 42) --[==[ [=[ [[ Nested ]] multi-line ]=] comment ]==] [==[ Nested [=[ multi-line [[ string ]] ]=] ]==] #AppleScript repeat 5 times if foo is greater than bar then display dialog &quot;Hello there&quot; else beep end if end repeat (* comment (*nested comment*) *) on do_something(s, y) return {s + pi, y mod 4} end do_something do shell script &quot;\/bin\/echo 'hello'&quot; #Delphi TList=Class(TObject) Private Some: String; Public Procedure Inside; \/\/ Suxx End;{TList} Procedure CopyFile(InFileName,var OutFileName:String); Const BufSize=4096; (* Huh? *) Var InFile,OutFile:TStream; Buffer:Array[1..BufSize] Of Byte; ReadBufSize:Integer; Begin InFile:=Nil; OutFile:=Nil; Try InFile:=TFileStream.Create(InFileName,fmOpenRead); OutFile:=TFileStream.Create(OutFileName,fmCreate); Repeat ReadBufSize:=InFile.Read(Buffer,BufSize); OutFile.Write(Buffer,ReadBufSize); Until ReadBufSize&lt;&gt;BufSize; Log('File '''+InFileName+''' copied'#13#10); Finally InFile.Free; OutFile.Free; End;{Try} End;{CopyFile} #Java \/** * @author John Smith &lt;john.smith@example.com&gt; * @version 1.0 *\/ package l2f.gameserver.model; import java.util.ArrayList; public abstract class L2Character extends L2Object { public static final Short ABNORMAL_EFFECT_BLEEDING = 0x0001; \/\/ not sure public void moveTo(int x, int y, int z) { _ai = null; _log.warning(&quot;Should not be called&quot;); if (1 &gt; 5) { return; } } \/** Task of AI notification *\/ @SuppressWarnings( { &quot;nls&quot;, &quot;unqualified-field-access&quot;, &quot;boxing&quot; }) public class NotifyAITask implements Runnable { private final CtrlEvent _evt; public void run() { try { getAI().notifyEvent(_evt, null, null); } catch (Throwable t) { t.printStackTrace(); } } } } #C++ #include &lt;iostream&gt; int main(int argc, char *argv[]) { \/* An annoying &quot;Hello World&quot; example *\/ for (auto i = 0; i &lt; 0xFFFF; i++) cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; endl; char c = '\\n'; unordered_map &lt;string, vector&lt;string&gt; &gt; m; m[&quot;key&quot;] = &quot;\\\\\\\\&quot;; \/\/ this is an error return -2e3 + 12l; } #Objective C #import &lt;UIKit\/UIKit.h&gt; #import &quot;Dependency.h&quot; @protocol WorldDataSource @optional - (NSString*)worldName; @required - (BOOL)allowsToLive; @end @interface Test : NSObject &lt;HelloDelegate, WorldDataSource&gt; { NSString *_greeting; } @property (nonatomic, readonly) NSString *greeting; - (IBAction) show; @end @implementation Test @synthesize test=_test; + (id) test { return [self testWithGreeting:@&quot;Hello, world!\\nFoo bar!&quot;]; } + (id) testWithGreeting:(NSString*)greeting { return [[[self alloc] initWithGreeting:greeting] autorelease]; } - (id) initWithGreeting:(NSString*)greeting { if ( (self = [super init]) ) { _greeting = [greeting retain]; } return self; } - (void) dealloc { [_greeting release]; [super dealloc]; } @end #Vala using DBus; namespace Test { class Foo : Object { public signal void some_event (); \/\/ definition of the signal public void method () { some_event (); \/\/ emitting the signal (callbacks get invoked) } } } \/* defining a class *\/ class Track : GLib.Object, Test.Foo { \/* subclassing 'GLib.Object' *\/ public double mass; \/* a public field *\/ public double name { get; set; } \/* a public property *\/ private bool terminated = false; \/* a private field *\/ public void terminate() { \/* a public method *\/ terminated = true; } } const ALL_UPPER_CASE = &quot;you should follow this convention&quot;; var t = new Track(); \/\/ same as: Track t = new Track(); var s = &quot;hello&quot;; \/\/ same as: string s = &quot;hello&quot;; var l = new List&lt;int&gt;(); \/\/ same as: List&lt;int&gt; l = new List&lt;int&gt;(); var i = 10; \/\/ same as: int i = 10; #if (ololo) Regex regex = \/foo\/; #endif \/* * Entry point can be outside class *\/ void main () { var long_string = &quot;&quot;&quot; Example of &quot;verbatim string&quot;. Same as in @&quot;string&quot; in C# &quot;&quot;&quot; var foo = new Foo (); foo.some_event.connect (callback_a); \/\/ connecting the callback functions foo.some_event.connect (callback_b); foo.method (); } #C using System; #pragma warning disable 414, 3021 public class Program { \/\/\/ &lt;summary&gt;The entry point to the program.&lt;\/summary&gt; public static int Main(string[] args) { Console.WriteLine(&quot;Hello, World!&quot;); string s = @&quot;This &quot;&quot;string&quot;&quot; spans multiple lines!&quot;; return 0; } } async Task&lt;int&gt; AccessTheWebAsync() { \/\/ ... string urlContents = await getStringTask; return urlContents.Length; } #F open System \/\/ Single line comment... (* This is a multiline comment. *) let checkList alist = match alist with | [] -&gt; 0 | [a] -&gt; 1 | [a; b] -&gt; 2 | [a; b; c] -&gt; 3 | _ -&gt; failwith &quot;List is too big!&quot; type IEncoding = abstract Encode : string -&gt; string abstract Decode : string -&gt; string let text = &quot;Some text...&quot; let text2 = @&quot;A &quot;&quot;verbatim&quot;&quot; string...&quot; let catalog = &quot;&quot;&quot; Some &quot;long&quot; string... &quot;&quot;&quot; let rec fib x = if x &lt;= 2 then 1 else fib(x-1) + fib(x-2) let fibs = Async.Parallel [ for i in 0..40 -&gt; async { return fib(i) } ] |&gt; Async.RunSynchronously type Sprocket(gears) = member this.Gears : int = gears [&lt;AbstractClass&gt;] type Animal = abstract Speak : unit -&gt; unit type Widget = | RedWidget | GreenWidget type Point = {X: float; Y: float;} [&lt;Measure&gt;] type s let minutte = 60&lt;s&gt; #D #!\/usr\/bin\/rdmd \/\/ Computes average line length for standard input. import std.stdio; \/+ this is a \/+ nesting +\/ comment +\/ enum COMPILED_ON = __TIMESTAMP__; \/\/ special token enum character = '\u00a9'; enum copy_valid = '&amp;copy;'; enum backslash_escaped = '\\\\'; \/\/ string literals enum str = `hello &quot;world&quot;!`; enum multiline = r&quot;lorem ipsum dolor&quot;; \/\/ wysiwyg string, no escapes here allowed enum multiline2 = &quot;sit amet \\&quot;adipiscing\\&quot; elit.&quot;; enum hex = x&quot;66 6f 6f&quot;; \/\/ same as &quot;foo&quot; #line 5 \/\/ float literals enum f = [3.14f, .1, 1., 1e100, 0xc0de.01p+100]; static if (something == true) { import std.algorithm; } void main() pure nothrow @safe { ulong lines = 0; double sumLength = 0; foreach (line; stdin.byLine()) { ++lines; sumLength += line.length; } writeln(&quot;Average line length: &quot;, lines ? sumLength \/ lines : 0); } #RenderMan RSL #define TEST_DEFINE 3.14 \/* plastic surface shader * * Pixie is: * (c) Copyright 1999-2003 Okan Arikan. All rights reserved. *\/ surface plastic (float Ka = 1, Kd = 0.5, Ks = 0.5, roughness = 0.1; color specularcolor = 1;) { normal Nf = faceforward (normalize(N),I); Ci = Cs * (Ka*ambient() + Kd*diffuse(Nf)) + specularcolor * Ks * specular(Nf,-normalize(I),roughness); Oi = Os; Ci *= Oi; } #RenderMan RIB FrameBegin 0 Display &quot;Scene&quot; &quot;framebuffer&quot; &quot;rgb&quot; Option &quot;searchpath&quot; &quot;shader&quot; &quot;+&amp;:\/home\/kew&quot; Option &quot;trace&quot; &quot;int maxdepth&quot; [4] Attribute &quot;visibility&quot; &quot;trace&quot; [1] Attribute &quot;irradiance&quot; &quot;maxerror&quot; [0.1] Attribute &quot;visibility&quot; &quot;transmission&quot; &quot;opaque&quot; Format 640 480 1.0 ShadingRate 2 PixelFilter &quot;catmull-rom&quot; 1 1 PixelSamples 4 4 Projection &quot;perspective&quot; &quot;fov&quot; 49.5502811377 Scale 1 1 -1 WorldBegin ReadArchive &quot;Lamp.002_Light\/instance.rib&quot; Surface &quot;plastic&quot; ReadArchive &quot;Cube.004_Mesh\/instance.rib&quot; # ReadArchive &quot;Sphere.010_Mesh\/instance.rib&quot; # ReadArchive &quot;Sphere.009_Mesh\/instance.rib&quot; ReadArchive &quot;Sphere.006_Mesh\/instance.rib&quot; WorldEnd FrameEnd #MEL (Maya Embedded Language) proc string[] getSelectedLights() { string $selectedLights[]; string $select[] = `ls -sl -dag -leaf`; for ( $shape in $select ) { \/\/ Determine if this is a light. \/\/ string $class[] = getClassification( `nodeType $shape` ); if ( ( `size $class` ) &gt; 0 &amp;&amp; ( &quot;light&quot; == $class[0] ) ) { $selectedLights[ `size $selectedLights` ] = $shape; } } \/\/ Result is an array of all lights included in \/\/ current selection list. return $selectedLights; } #GLSL \/\/ vertex shader #version 150 in vec2 in_Position; in vec3 in_Color; out vec3 ex_Color; void main(void) { gl_Position = vec4(in_Position.x, in_Position.y, 0.0, 1.0); ex_Color = in_Color; } \/\/ geometry shader #version 150 layout(triangles) in; layout(triangle_strip, max_vertices = 3) out; void main() { for(int i = 0; i &lt; gl_in.length(); i++) { gl_Position = gl_in[i].gl_Position; EmitVertex(); } EndPrimitive(); } \/\/ fragment shader #version 150 precision highp float; in vec3 ex_Color; out vec4 gl_FragColor; void main(void) { gl_FragColor = vec4(ex_Color, 1.0); } #SQL BEGIN; CREATE TABLE &quot;topic&quot; ( &quot;id&quot; serial NOT NULL PRIMARY KEY, &quot;forum_id&quot; integer NOT NULL, &quot;subject&quot; varchar(255) NOT NULL ); ALTER TABLE &quot;topic&quot; ADD CONSTRAINT forum_id FOREIGN KEY (&quot;forum_id&quot;) REFERENCES &quot;forum&quot; (&quot;id&quot;); -- Initials insert into &quot;topic&quot; (&quot;forum_id&quot;, &quot;subject&quot;) values (2, 'D''artagnian'); select count(*) from cicero_forum; -- this line lacks ; at the end to allow people to be sloppy and omit it in one-liners COMMIT #SmallTalk Object&gt;&gt;method: num &quot;comment 123&quot; | var1 var2 | (1 to: num) do: [:i | |var| ^i]. Klass with: var1. Klass new. arr := #('123' 123.345 #hello Transcript var $@). arr := #(). var2 = arr at: 3. ^ self abc heapExample &quot;HeapTest new heapExample&quot; &quot;Multiline decription&quot; | n rnd array time sorted | n := 5000. &quot;# of elements to sort&quot; rnd := Random new. array := (1 to: n) collect: [:i | rnd next]. &quot;First, the heap version&quot; time := Time millisecondsToRun: [sorted := Heap withAll: array. 1 to: n do: [:i | sorted removeFirst. sorted add: rnd next]]. Transcript cr; show: 'Time for Heap: ' , time printString , ' msecs'. &quot;The quicksort version&quot; time := Time millisecondsToRun: [sorted := SortedCollection withAll: array. 1 to: n do: [:i | sorted removeFirst. sorted add: rnd next]]. Transcript cr; show: 'Time for SortedCollection: ' , time printString , ' msecs' #Lisp #!\/usr\/bin\/env csi (defun prompt-for-cd () &quot;Prompts for CD&quot; (prompt-read &quot;Title&quot; 1.53 1 2\/4 1.7 1.7e0 2.9E-4 +42 -7 #b001 #b001\/100 #o777 #O777 #xabc55 #c(0 -5.6)) (prompt-read &quot;Artist&quot; &amp;rest) (or (parse-integer (prompt-read &quot;Rating&quot;) :junk-allowed t) 0) (if x (format t &quot;yes&quot;) (format t &quot;no&quot; nil) ;and here comment ) ;; second line comment '(+ 1 2) (defvar *lines*) ; list of all lines (position-if-not #'sys::whitespacep line :start beg)) (quote (privet 1 2 3)) '(hello world) (* 5 7) (1 2 34 5) (:use &quot;aaaa&quot;) (let ((x 10) (y 20)) (print (+ x y)) ) #Clojure ; You must not remove this notice, or any other, from this software. (ns ^{:doc &quot;The core Clojure language.&quot; :author &quot;Rich Hickey&quot;} clojure.core) (def unquote) (def ^{:macro true :added &quot;1.0&quot;} let (fn* let [&amp;form &amp;env &amp; decl] (cons 'let* decl))) (def defn (fn defn [&amp;form &amp;env name &amp; fdecl] (let [m (conj {:arglists (list 'quote (sigs fdecl))} m) m (let [inline (:inline m) ifn (first inline) iname (second inline)] ;; same as: (if (and (= 'fn ifn) (not (symbol? iname))) ...) (if (if (clojure.lang.Util\/equiv 'fn ifn) (if (instance? clojure.lang.Symbol iname) false true)) ;; inserts the same fn name to the inline fn if it does not have one (assoc m :inline (cons ifn (cons (clojure.lang.Symbol\/intern (.concat (.getName ^clojure.lang.Symbol name) &quot;__inliner&quot;)) (next inline)))) m)) m (conj (if (meta name) (meta name) {}) m)] (list 'def (with-meta name m) ;;todo - restore propagation of fn name ;;must figure out how to convey primitive hints to self calls first (cons `fn fdecl) )))) (. (var defn) (setMacro)) #Ini file ;Settings relating to the location and loading of the database [Database] ProfileDir=. ShowProfileMgr=smart Profile1_Name[] = &quot;\\|\/_-=MegaDestoyer=-_\\|\/&quot; DefaultProfile=True AutoCreate = no [AutoExec] use-prompt=&quot;prompt&quot; Glob=autoexec_*.ini AskAboutIgnoredPlugins=0 #Apache # rewrite`s rules for wordpress pretty url LoadModule rewrite_module modules\/mod_rewrite.so RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule . index.php [NC,L] ExpiresActive On ExpiresByType application\/x-javascript &quot;access plus 1 days&quot; &lt;Location \/maps\/&gt; RewriteMap map txt:map.txt RewriteMap lower int:tolower RewriteCond %{REQUEST_URI} ^\/([^\/.]+)\\.html$ [NC] RewriteCond ${map:${lower:%1}|NOT_FOUND} !NOT_FOUND RewriteRule .? \/index.php?q=${map:${lower:%1}} [NC,L] &lt;\/Location&gt; #nginx user www www; worker_processes 2; pid \/var\/run\/nginx.pid; error_log \/var\/log\/nginx.error_log debug | info | notice | warn | error | crit; events { connections 2000; use kqueue | rtsig | epoll | \/dev\/poll | select | poll; } http { log_format main '$remote_addr - $remote_user [$time_local] ' '&quot;$request&quot; $status $bytes_sent ' '&quot;$http_referer&quot; &quot;$http_user_agent&quot; ' '&quot;$gzip_ratio&quot;'; send_timeout 3m; client_header_buffer_size 1k; gzip on; gzip_min_length 1100; #lingering_time 30; server { server_name one.example.com www.one.example.com; access_log \/var\/log\/nginx.access_log main; rewrite (.*) \/index.php?page=$1 break; location \/ { proxy_pass http:\/\/127.0.0.1\/; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; charset koi8-r; } location \/api\/ { fastcgi_pass 127.0.0.1:9000; } location ~* \\.(jpg|jpeg|gif)$ { root \/spool\/www; } } } #Diff Index: languages\/ini.js =================================================================== --- languages\/ini.js (revision 199) +++ languages\/ini.js (revision 200) @@ -1,8 +1,7 @@ hljs.LANGUAGES.ini = { case_insensitive: true, - defaultMode: - { + defaultMode: { contains: ['comment', 'title', 'setting'], illegal: '[^\\\\s]' }, *** \/path\/to\/original timestamp --- \/path\/to\/new timestamp *************** *** 1,3 **** --- 1,9 ---- + This is an important + notice! It should + therefore be located at + the beginning of this + document! ! compress the size of the ! changes. It is important to spell #DOS batch files cd \\ copy a b ping 192.168.0.1 @rem ping 192.168.0.1 net stop sharedaccess del %tmp% \/f \/s \/q del %temp% \/f \/s \/q ipconfig \/flushdns taskkill \/F \/IM JAVA.EXE \/T cd Photoshop\/Adobe Photoshop CS3\/AMT\/ if exist application.sif ( ren application.sif _application.sif ) else ( ren _application.sif application.sif ) taskkill \/F \/IM proquota.exe \/T sfc \/SCANNOW set path = test xcopy %1\\*.* %2 #Bash #!\/bin\/bash ###### BEGIN CONFIG ACCEPTED_HOSTS=&quot;\/root\/.hag_accepted.conf&quot; BE_VERBOSE=false ###### END CONFIG if [ &quot;$UID&quot; -ne 0 ] then echo &quot;Superuser rights is required&quot; echo 'Printing the # sign' exit 2 fi if test $# -eq 0 then elif test [ $1 == 'start' ] else fi genApacheConf(){ if [[ &quot;$2&quot; = &quot;www&quot; ]] then full_domain=$1 else full_domain=$2.$1 fi host_root=&quot;${APACHE_HOME_DIR}$1\/$2\/$(title)&quot; echo -e &quot;# Host $1\/$2 :&quot; } #CMake project(test) cmake_minimum_required(VERSION 2.6) # IF LINUX if (${CMAKE_SYSTEM_NAME} MATCHES Linux) message(&quot;\\nOS:\\t\\tLinux&quot;) endif() # IF WINDOWS if (${CMAKE_SYSTEM_NAME} MATCHES Windows) message(&quot;\\nOS:\\t\\tWindows&quot;) endif() set(test test0.cpp test1.cpp test2.cpp) include_directories(.\/) set(EXECUTABLE_OUTPUT_PATH ..\/bin) add_subdirectory(src) add_executable(test WIN32 ${test}) target_link_libraries(test msimg32) #Axapta class ExchRateLoadBatch extends RunBaseBatch { ExchRateLoad rbc; container currencies; boolean actual; boolean overwrite; date beg; date end; #define.CurrentVersion(5) #localmacro.CurrentList currencies, actual, beg, end #endmacro } public boolean unpack(container packedClass) { container base; boolean ret; Integer version = runbase::getVersion(packedClass); switch (version) { case #CurrentVersion: [version, #CurrentList] = packedClass; return true; default: return false; } return ret; } #Oracle Rules Language \/\/This is a comment ABORT &quot;You experienced an abort.&quot;; WARN &quot;THIS IS A WARNING&quot;; CALL &quot;RIDER_X&quot;; DONE; FOR EACH X IN CSV_FILE &quot;d:\\lodestar\\user\\d377.lse&quot; LEAVE FOR; END FOR; IF ((BILL_KW = 0) AND (KW &gt; 0)) THEN END IF; INCLUDE &quot;R1&quot;; LEAVE RIDER; SELECT BILL_PERIOD WHEN &quot;WINTER&quot; BLOCK KWH FROM 0 TO 400 CHARGE $0.03709 FROM 400 CHARGE $0.03000 TOTAL $ENERGY_CHARGE_WIN; WHEN &quot;SUMMER&quot; $VOLTAGE_DISCOUNT_SUM = $0.00 OTHERWISE $VOLTAGE_DISCOUNT_SUM = $1.00 END SELECT; \/* Report top five peaks *\/ LABEL PK.NM &quot;Peak Number&quot;; SAVE_UPDATE MV TO TABLE &quot;METERVALUE&quot;; FOR EACH INX IN ARRAYUPPERBOUND(#MYARRAY[]) #MYARRAY[INX].VALUE = 2; CLEAR #MYARRAY[]; END FOR \/\/Interval Data HNDL_1_ADD_EDI = INTDADDATTRIBUTE(HNDL_1, &quot;EDI_TRANSACTION&quot;, EDI_ID); HNDL_1_ADD_VAL_MSG = INTDADDVMSG(HNDL_1,&quot;Missing (Status Code 9) values found&quot;); EMPTY_HNDL = INTDCREATEHANDLE('05\/03\/2006 00:00:00', '05\/03\/2006 23:59:59', 3600, &quot;Y&quot;, &quot;0&quot;, &quot; &quot;); #1\u0421 #\u0415\u0441\u043b\u0438 \u041a\u043b\u0438\u0435\u043d\u0442 \u0422\u043e\u0433\u0434\u0430 \u041f\u0435\u0440\u0435\u043c \u0421\u0438\u043c\u0432\u043e\u043b\u044c\u043d\u044b\u0439\u041a\u043e\u0434\u041a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 = &quot;\u043b\u044f-\u043b\u044f-\u043b\u044f&quot;; \/\/\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0421\u043e\u043e\u0431\u0449\u0438\u0442\u044c(\u0417\u043d\u0430\u0447 \u0422\u0435\u043a\u0441\u0442\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0422\u0435\u043a\u0441\u0442\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f2) \u042d\u043a\u0441\u043f\u043e\u0440\u0442 \/\/\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0438 x=\u0422\u0435\u043a\u0441\u0442\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f+\u0422\u0435\u043a\u0441\u0442\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f2+&quot; |\u0441\u0442\u0440\u043e\u043a\u04301 |\u0441\u0442\u0440\u043e\u043a\u04302 |\u0441\u0442\u0440\u043e\u043a\u04303&quot;; \u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438 #\u041a\u043e\u043d\u0435\u0446\u0415\u0441\u043b\u0438 \/\/ \u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0440\u0438\u041d\u0430\u0447\u0430\u043b\u0435\u0420\u0430\u0431\u043e\u0442\u044b\u0421\u0438\u0441\u0442\u0435\u043c\u044b \/\/ \u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0440\u0438\u041d\u0430\u0447\u0430\u043b\u0435\u0420\u0430\u0431\u043e\u0442\u044b\u0421\u0438\u0441\u0442\u0435\u043c\u044b() \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\u041f\u043e\u043c\u043e\u0449\u043d\u0438\u043a.\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0424\u043e\u0440\u043c\u0443(&quot;\u0424\u043e\u0440\u043c\u0430&quot;).\u041e\u0442\u043a\u0440\u044b\u0442\u044c(); d = '21.01.2008' \u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b #AVR Assembler ;* Title: Block Copy Routines ;* Version: 1.1 .include &quot;8515def.inc&quot; rjmp RESET ;reset handle .def flashsize=r16 ;size of block to be copied flash2ram: lpm ;get constant st Y+,r0 ;store in SRAM and increment Y-pointer adiw ZL,1 ;increment Z-pointer dec flashsize brne flash2ram ;if not end of table, loop more ret .def ramtemp =r1 ;temporary storage register .def ramsize =r16 ;size of block to be copied #VHDL \/* * RS-trigger with assynch. reset *\/ library ieee; use ieee.std_logic_1164.all; entity RS_trigger is generic (T: Time := 0ns); port ( R, S : in std_logic; Q, nQ : out std_logic; reset, clock : in std_logic ); end RS_trigger; architecture behaviour of RS_trigger is signal QT: std_logic; -- Q(t) begin process(clock, reset) is subtype RS is std_logic_vector (1 downto 0); begin if reset = '0' then QT &lt;= '0'; else if rising_edge(C) then if not (R'stable(T) and S'stable(T)) then QT &lt;= 'X'; else case RS'(R&amp;S) is when &quot;01&quot; =&gt; QT &lt;= '1'; when &quot;10&quot; =&gt; QT &lt;= '0'; when &quot;11&quot; =&gt; QT &lt;= 'X'; when others =&gt; null; end case; end if; end if; end if; end process; Q &lt;= QT; nQ &lt;= not QT; end architecture behaviour; #Parser 3 @CLASS base @USE module.p @BASE class # Comment for code @create[aParam1;aParam2][local1;local2] ^connect[mysql:\/\/host\/database?ClientCharset=windows-1251] ^for[i](1;10){ &lt;p class=&quot;paragraph&quot;&gt;^eval($i+10)&lt;\/p&gt; ^connect[mysql:\/\/host\/database]{ $tab[^table::sql{select * from `table` where a='1'}] $var_Name[some${value}] } } ^rem{ Multiline comment with code: $var ^while(true){ ^for[i](1;10){ ^sleep[] } } } ^taint[^#0A] @GET_base[] ## Comment for code # Isn't comment $result[$.hash_item1[one] $.hash_item2[two]] #TeX \\documentclass{article} \\usepackage[koi8-r]{inputenc} \\hoffset=0pt \\voffset=.3em \\tolerance=400 \\newcommand{\\eTiX}{\\TeX} \\begin{document} \\section*{Highlight.js} \\begin{table}[c|c] $\\frac 12\\, + \\, \\frac 1{x^3}\\text{Hello \\! world}$ &amp; \\textbf{Goodbye\\~ world} \\\\\\eTiX $ \\pi=400 $ \\end{table} Ch\\'erie, \\c{c}a ne me pla\\^\\i t pas! % comment \\b G\\&quot;otterd\\&quot;ammerung~45\\%=34. $$ \\int\\limits_{0}^{\\pi}\\frac{4}{x-7}=3 $$ \\end{document} #Haskell {-# LANGUAGE TypeSynonymInstances #-} module Network.UDP ( DataPacket(..) , openBoundUDPPort , openListeningUDPPort , pingUDPPort , sendUDPPacketTo , recvUDPPacket , recvUDPPacketFrom ) where {- this is a {- nested -} comment -} import qualified Data.ByteString as Strict (ByteString, concat, singleton) import qualified Data.ByteString.Lazy as Lazy (ByteString, toChunks, fromChunks) import Data.ByteString.Char8 (pack, unpack) import Network.Socket hiding (sendTo, recv, recvFrom) import Network.Socket.ByteString (sendTo, recv, recvFrom) -- Type class for converting StringLike types to and from strict ByteStrings class DataPacket a where toStrictBS :: a -&gt; Strict.ByteString fromStrictBS :: Strict.ByteString -&gt; a instance DataPacket Strict.ByteString where toStrictBS = id {-# INLINE toStrictBS #-} fromStrictBS = id {-# INLINE fromStrictBS #-} openBoundUDPPort :: String -&gt; Int -&gt; IO Socket openBoundUDPPort uri port = do s &lt;- getUDPSocket bindAddr &lt;- inet_addr uri let a = SockAddrInet (toEnum port) bindAddr bindSocket s a return s pingUDPPort :: Socket -&gt; SockAddr -&gt; IO () pingUDPPort s a = sendTo s (Strict.singleton 0) a &gt;&gt; return () #Erlang -module(ssh_cli). -behaviour(ssh_channel). -include(&quot;ssh.hrl&quot;). %% backwards compatibility -export([listen\/1, listen\/2, listen\/3, listen\/4, stop\/1]). %% state -record(state, { cm, channel }). test(Foo)-&gt;Foo. init([Shell, Exec]) -&gt; {ok, #state{shell = Shell, exec = Exec}}; init([Shell]) -&gt; false = not true, io:format(&quot;Hello, \\&quot;~p!~n&quot;, [atom_to_list('World')]), {ok, #state{shell = Shell}}. concat([Single]) -&gt; Single; concat(RList) -&gt; EpsilonFree = lists:filter( fun (Element) -&gt; case Element of epsilon -&gt; false; _ -&gt; true end end, RList), case EpsilonFree of [Single] -&gt; Single; Other -&gt; {concat, Other} end. union_dot_union({union, _}=U1, {union, _}=U2) -&gt; union(lists:flatten( lists:map( fun (X1) -&gt; lists:map( fun (X2) -&gt; concat([X1, X2]) end, union_to_list(U2) ) end, union_to_list(U1) ))). #Erlang REPL 1&gt; Str = &quot;abcd&quot;. &quot;abcd&quot; 2&gt; L = test:length(Str). 4 3&gt; Descriptor = {L, list_to_atom(Str)}. {4,abcd} 4&gt; L. 4 5&gt; b(). Descriptor = {4,abcd} L = 4 Str = &quot;abcd&quot; ok 6&gt; f(L). ok 7&gt; b(). Descriptor = {4,abcd} Str = &quot;abcd&quot; ok 8&gt; {L, _} = Descriptor. {4,abcd} 9&gt; L. 4 10&gt; 2#101. 5 11&gt; 1.85e+3. 1850 #Rust use std; import std::io; export fac, test1; 123; \/\/ type int 123u; \/\/ type uint 123_u; \/\/ type uint 0xff00; \/\/ type int 0xff_u8; \/\/ type u8 0b1111_1111_1001_0000_i32; \/\/ type i32 123.0; \/\/ type float 0.1; \/\/ type float 3f; \/\/ type float 0.1f32; \/\/ type f32 12E+99_f64; \/\/ type f64 \/* Factorial *\/ fn fac(n: int) -&gt; int { let s: str = &quot;This is a multi-line string. It ends with an unescaped '\\&quot;'.&quot;; let c: char = '\u0424'; let result = 1, i = 1; while i &lt;= n { \/\/ No parens around the condition result *= i; i += 1; } ret result; } pure fn pure_length&lt;T&gt;(ls: list&lt;T&gt;) -&gt; uint { \/* ... *\/ } type t = map::hashtbl&lt;int,str&gt;; let x = id::&lt;int&gt;(10); \/\/ Define some modules. #[path = &quot;foo.rs&quot;] mod foo; iface seq&lt;T&gt; { fn len() -&gt; uint; } impl &lt;T&gt; of seq&lt;T&gt; for [T] { fn len() -&gt; uint { vec::len(self) } fn iter(b: fn(T)) { for elt in self { b(elt); } } } enum list&lt;T&gt; { nil; cons(T, @list&lt;T&gt;); } let a: list&lt;int&gt; = cons(7, @cons(13, @nil)); #Matlab n = 20; % number of points points = [random('unid', 100, n, 1), random('unid', 100, n, 1)]; len = zeros(1, n - 1); points = sortrows(points); %% Initial set of points plot(points(:,1),points(:,2)); for i = 1: n-1 len(i) = points(i + 1, 1) - points(i, 1); end while(max(len) &gt; 2 * min(len)) [d, i] = max(len); k = on_margin(points, i, d, -1); m = on_margin(points, i + 1, d, 1); xm = 0; ym = 0; %% New point if(i == 1 || i + 1 == n) xm = mean(points([i,i+1],1)) ym = mean(points([i,i+1],2)) else [xm, ym] = dlg1(points([k, i, i + 1, m], 1), ... points([k, i, i + 1, m], 2)) end points = [ points(1:i, :); [xm, ym]; points(i + 1:end, :)]; end function [net] = get_fit_network(inputs, targets) % Create Network numHiddenNeurons = 20; % Adjust as desired net = newfit(inputs,targets,numHiddenNeurons); net.trainParam.goal = 0.01; net.trainParam.epochs = 1000; % Train and Apply Network [net,tr] = train(net,inputs,targets); end foo_matrix = [1, 2, 3; 4, 5, 6]'''; foo_cell = {1, 2, 3; 4, 5, 6}''.'.'; #R library(ggplot2) centre &lt;- function(x, type, ...) { switch(type, mean = mean(x), median = median(x), trimmed = mean(x, trim = .1)) } myVar1 myVar.2 data$x foo &quot;bar&quot; baz # test &quot;test&quot; &quot;test # test&quot; (123) (1) (10) (0.1) (.2) (1e-7) (1.2e+7) (2e) (3e+10) (0x0) (0xa) (0xabcdef1234567890) (123L) (1L) (0x10L) (10000000L) (1e6L) (1.1L) (1e-3L) (4123.381E-10i) (3.) (3.E10) # BUG: .E10 should be part of number # Numbers in some different contexts 1L 0x40 .234 3. 1L + 30 plot(cars, xlim=20) plot(cars, xlim=0x20) foo&lt;-30 my.data.3 &lt;- read() # not a number c(1,2,3) 1%%2 &quot;this is a quote that spans multiple lines \\&quot; is this still a quote? it should be. # even still! &quot; # now we're done. 'same for single quotes #' # keywords NULL, NA, TRUE, FALSE, Inf, NaN, NA_integer_, NA_real_, NA_character_, NA_complex_, function, while, repeat, for, if, in, else, next, break, ..., ..1, ..2 # not keywords the quick brown fox jumped over the lazy dogs null na true false inf nan na_integer_ na_real_ na_character_ na_complex_ Function While Repeat For If In Else Next Break .. .... &quot;NULL&quot; `NULL` 'NULL' # operators +, -, *, \/, %%, ^, &gt;, &gt;=, &lt;, &lt;=, ==, !=, !, &amp;, |, ~, -&gt;, &lt;-, &lt;&lt;-, $, :, :: # infix operator foo %union% bar %&quot;test&quot;% `&quot;test&quot;` #Mizar ::: ## Lambda calculus environ vocabularies LAMBDA, NUMBERS, NAT_1, XBOOLE_0, SUBSET_1, FINSEQ_1, XXREAL_0, CARD_1, ARYTM_1, ARYTM_3, TARSKI, RELAT_1, ORDINAL4, FUNCOP_1; :: etc... begin reserve D for DecoratedTree, p,q,r for FinSequence of NAT, x for set; definition let D; attr D is LambdaTerm-like means (dom D qua Tree) is finite &amp; ::&gt; *143,306 for r st r in dom D holds r is FinSequence of {0,1} &amp; r^&lt;*0*&gt; in dom D implies D.r = 0; end; registration cluster LambdaTerm-like for DecoratedTree of NAT; existence; ::&gt; *4 end; definition mode LambdaTerm is LambdaTerm-like DecoratedTree of NAT; end; ::: Then we extend this ordinary one-step beta reduction, that is, ::: any subterm is also allowed to reduce. definition let M,N; pred M beta N means ex p st M|p beta_shallow N|p &amp; for q st not p is_a_prefix_of q holds [r,x] in M iff [r,x] in N; end; theorem Th4: ProperPrefixes (v^&lt;*x*&gt;) = ProperPrefixes v \\\/ {v} proof thus ProperPrefixes (v^&lt;*x*&gt;) c= ProperPrefixes v \\\/ {v} proof let y; assume y in ProperPrefixes (v^&lt;*x*&gt;); then consider v1 such that A1: y = v1 and A2: v1 is_a_proper_prefix_of v^&lt;*x*&gt; by TREES_1:def 2; v1 is_a_prefix_of v &amp; v1 &lt;&gt; v or v1 = v by A2,TREES_1:9; then v1 is_a_proper_prefix_of v or v1 in {v} by TARSKI:def 1,XBOOLE_0:def 8; then y in ProperPrefixes v or y in {v} by A1,TREES_1:def 2; hence thesis by XBOOLE_0:def 3; end; let y; assume y in ProperPrefixes v \\\/ {v}; then A3: y in ProperPrefixes v or y in {v} by XBOOLE_0:def 3; A4: now assume y in ProperPrefixes v; then consider v1 such that A5: y = v1 and A6: v1 is_a_proper_prefix_of v by TREES_1:def 2; v is_a_prefix_of v^&lt;*x*&gt; by TREES_1:1; then v1 is_a_proper_prefix_of v^&lt;*x*&gt; by A6,XBOOLE_1:58; hence thesis by A5,TREES_1:def 2; end; v^{} = v by FINSEQ_1:34; then v is_a_prefix_of v^&lt;*x*&gt; &amp; v &lt;&gt; v^&lt;*x*&gt; by FINSEQ_1:33,TREES_1:1; then v is_a_proper_prefix_of v^&lt;*x*&gt; by XBOOLE_0:def 8; then y in ProperPrefixes v or y = v &amp; v in ProperPrefixes (v^&lt;*x*&gt;) by A3,TARSKI:def 1,TREES_1:def 2; hence thesis by A4; end;","tags":"","url":"Examples\/Code_Highlighting.html"},{"title":"Hello World","text":"This is just another sample page to get you started. What do you think ? \u6d4b\u8bd5\u4e00\u4e0b","tags":"","url":"Examples\/Hello_World.html"},{"title":"Hallo Welt","text":"This is a page which has attributes and a overriden Title","tags":"","url":"Examples\/Hello_World_de.html"},{"title":"\u043f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440","text":"We also support UTF-8 file names","tags":"","url":"Examples\/privet_mir.html"},{"title":"\u4f60\u597d\u4e16\u754c","text":"Even more UTF-8 file names !","tags":"","url":"Examples\/ni_hao_shi_jie.html"},{"title":"Configuration","text":"To customize the look and feel of your documentation, you can create a config.json file in the of the \/docs folder. The config.json file is a JSON object that you can use to change some of the basic settings of the documentation. Table of contents Table of Contents Title Tagline Author Image Format Ignore Timezone Multi-language Language Processor #Title Change the title bar in the docs { \"title\": \"Daux.io\" } #Tagline Change the tagline bar in the docs { \"tagline\": \"The Easiest Way To Document Your Project\" } #Author Change the documentation\u2019s author { \"author\": \"St\u00e9phane Goetz\" } #Image An image to show on the landing page. A relative path from the documentation root. { \"image\": \"image.png\" } #Format Change the output format. It is recommended you set only formats that support the live mode as this will also be read by the integrated web server. And you set the other formats (like confluence) only by command line { \"format\": \"html\" } html with its options confluence with its options Available formats are HTML and Confluence #Ignore Set custom files and entire folders to ignore within your \/docs folder. For files make sure to include the file extension in the name. For both files and folders, names are case-sensitive. { \"ignore\": { \"files\": [\"Work_In_Progress.md\"], \"folders\": [\"99_Not_Ready\"] } } #Timezone If your server does not have a default timezone set in php.ini, it may return errors when it tries to generate the last modified date\/time for docs. To fix these errors, specify a timezone in your config file. Valid options are available in the PHP Manual. { \"timezone\": \"America\/Los_Angeles\" } #Multi-language Enables multi-language support which needs separate directories for each language in docs\/ folder. { \"languages\": { \"en\": \"English\", \"de\": \"German\" } } Directory structure: \u251c\u2500\u2500 docs\/ \u2502 \u251c\u2500\u2500 _index.md \u2502 \u251c\u2500\u2500 en \u2502 \u2502 \u251c\u2500\u2500 00_Getting_Started.md \u2502 \u2502 \u251c\u2500\u2500 01_Examples \u2502 \u2502 \u2502 \u251c\u2500\u2500 01_CommonMark_compliant.md \u2502 \u2502 \u2502 \u251c\u2500\u2500 05_Code_Highlighting.md \u2502 \u2502 \u251c\u2500\u2500 05_More_Examples \u2502 \u2502 \u2502 \u251c\u2500\u2500 Hello_World.md \u2502 \u2502 \u2502 \u251c\u2500\u2500 05_Code_Highlighting.md \u2502 \u251c\u2500\u2500 de \u2502 \u2502 \u251c\u2500\u2500 00_Getting_Started.md \u2502 \u2502 \u251c\u2500\u2500 01_Examples \u2502 \u2502 \u2502 \u251c\u2500\u2500 01_CommonMark_compliant.md \u2502 \u2502 \u2502 \u251c\u2500\u2500 05_Code_Highlighting.md \u2502 \u2502 \u251c\u2500\u2500 05_More_Examples \u2502 \u2502 \u2502 \u251c\u2500\u2500 Hello_World.md \u2502 \u2502 \u2502 \u251c\u2500\u2500 05_Code_Highlighting.md #Language You can change the default language with the language option. { \"language\": \"fr\" } This will change the language of the text within Daux.io and also the &lt;html lang&gt; attribute. You can override the translations with the strings option. A string that isn\u2019t found will fall back to english. { \"strings\": { \"fr\": { \"CodeBlocks_show\": \"Afficher le code\", \"Search_placeholder\": \"Rechercher...\", \"Link_previous\": \"Pr\u00e9c\u00e9dent\", \"Link_next\": \"Suivant\", \"Edit_on\": \"Editer sur :name:\", \"View_on_github\": \"Voir sur GitHub\", \"View_documentation\": \"Voir la Documentation\" } } } #Processor You can set the processor in the documentation or as an option to the command line. If you need it when running the server, you should add it to the configuration. More information on how to create a Processor can be found here. { \"processor\": \"MyProcessor\" }","tags":"","url":"Configuration\/index.html"},{"title":"Confluence upload","text":"Table of contents Table of Contents Configuring the connection Where to upload Prefix Update threshold Delete old pages Information message #Configuring the connection The connection requires three parameters base_url, user and pass. While user and pass don\u2019t really need an explanation, for base_url you need to set the path to the server without rest\/api, this will be added automatically. { \"confluence\": { \"base_url\": \"http:\/\/my_confluence_server.com\/\", \"user\": \"my_username\", \"pass\": \"my_password_or_token\" } } If you are using Atlassian.com you might need to use a token instead of a password. You can create a token by following this documentation. #Where to upload Now that the connection is defined, you need to tell it where you want your documentation to be uploaded. For that you need an ancestor_id or root_id; the id of the page that will be the parent of the documentation\u2019s homepage or the page that will be the homepage of your documentation respectively. You can obtain a page\u2019s id by checking the links of the actions on the page (page information, show source code, export, etc) : the ID corresponds to the query parameter pageId. { \"confluence\": { \"ancestor_id\": 50370632 } } If using an ancestor_id you may wish to create the page automatically if it doesn\u2019t exist. To do so, set create_root_if_missing to true. { \"confluence\": { \"ancestor_id\": 50370632, \"create_root_if_missing\": true } } #Prefix Because confluence can\u2019t have two pages with the same name in a space, I recommend you define a prefix for your pages. { \"confluence\": { \"prefix\": \"DAUX -\" } } #Update threshold To make the upload quicker, we try to determine if a page changed or not, first with a strict comparison and if it\u2019s not completely identical, we compute the difference. { \"confluence\": { \"update_threshold\": 1 } } If you set update_threshold to 1, it will upload only if the page has more than 1% difference with the previous one. By default the threshold is 2%. Setting the value to 0 disables the feature altogether. #Delete old pages When a page is renamed, there is no way to tell it was renamed, so when uploading to Confluence, the page will be uploaded and the old page will stay here. By default, it will inform you that some pages aren\u2019t needed anymore and you can delete them by hand. { \"confluence\": { \"delete\": true } } By setting delete to true (or running daux with the --delete flag) you tell the generator that it can safely delete the pages. #Information message When you create your page. there is no indication that the upload process will override the content of the pages. It happens sometimes that users edit the pages to add \/ fix an information. You can add a text in a \u201cinformation\u201d macro on top of the document by setting the following configuration : { \"confluence\": { \"header\": \"These pages are updated automatically, your changes will be overriden.\" } } It will look like this :","tags":"","url":"Configuration\/Confluence_upload.html"},{"title":"Html export","text":"Table of contents Table of Contents Analytics Google Analytics Piwik Analytics Plausible Analytics Automatic Table of Contents Buttons Breadcrumb titles Date Modified GitHub Repo Inherit Index Jump buttons Landing page Links Search Themes Toggling Code Blocks Twitter #Analytics #Google Analytics This will embed the google analytics tracking code. { \"html\": { \"google_analytics\": \"UA-XXXXXXXXX-XX\" } } #Piwik Analytics This will embed the piwik tracking code. { \"html\": { \"piwik_analytics\": \"my-url-for-piwik.com\" } } You can Also give a specific Piwik ID as well. { \"html\": { \"piwik_analytics_id\": \"43\" } } #Plausible Analytics This will embed the https:\/\/plausible.io\/ tracking code. { \"html\": { \"plausible_domain\": \"daux.io\" } } #Automatic Table of Contents You can add a table of contents on each page automatically, read about it here #Buttons You can add buttons to the landing page. { \"html\": { \"buttons\": { \"My Website\": \"http:\/\/example.com\" } } } #Breadcrumb titles Daux.io provides the option to present page titles as breadcrumb navigation. You can optionally specify the separator used for breadcrumbs. { \"html\": { \"breadcrumbs\": true, \"breadcrumb_separator\": \" &gt; \" } } #Date Modified By default, daux.io will display the last modified time as reported by the system underneath the title for each document. To disable this, change the option in your config.json to false. { \"html\": { \"date_modified\": false } } #GitHub Repo Add a \u2018Fork me on GitHub\u2019 ribbon. { \"html\": { \"repo\": \"dauxio\/daux.io\" } } #Inherit Index This feature will instructs the navigation generator to seek the first available file to use when there is no index in a folder. { \"html\": { \"inherit_index\": true } } #Jump buttons You can have previous\/next buttons on each page. They can be disabled by setting jump_buttons to false. { \"html\": { \"jump_buttons\": false } } #Landing page The automatic landing page can be disabled through the auto_landing option, read about it here #Links Include custom links in the sidebar. { \"html\": { \"links\": { \"GitHub Repo\": \"https:\/\/github.com\/dauxio\/daux.io\", \"Help\/Support\/Bugs\": \"https:\/\/github.com\/dauxio\/daux.io\/issues\", \"Made by Todaymade\": \"http:\/\/todaymade.com\" } } } #Search Daux has an embedded search engine read all about it here #Themes We have 4 built-in Bootstrap themes. To use one of the themes, just set the theme option to one of the following: daux-blue daux-green daux-navy daux-red { \"html\": { \"theme\": \"daux-blue\" } } To use a custom theme, just copy over the theme folder into the themes directory and set its value in the theme param in config.json { \"html\": { \"theme\": \"new-theme\" } } #Toggling Code Blocks Some users might wish to hide the code blocks &amp; view just the documentation. By setting the toggle_code property to true, you can offer a toggle button on the page. { \"html\": { \"toggle_code\": true } } #Twitter Include twitter follow buttons in the sidebar. { \"html\": { \"twitter\": [\"justin_walsh\", \"todaymade\"] } }","tags":"","url":"Configuration\/Html_export.html"},{"title":"Creating a Processor","text":"The recommended way to extend Daux is through Processors. The main advantage, is that you can run it with the source or with daux independently. You don\u2019t need to hack in the core. #Adding classes Next to your docs directory, you can create a daux directory that can contain your Processor. The classes must respect the PSR-4 Naming convention. And have \\Todaymade\\Daux\\Extension as a base namespace. You can copy our Processor template to get started. By default, we created a daux\/Processor.php file to get you started. #A quick test ? For the example we\u2019re just going to dump the tree and exit. public function manipulateTree(Root $root) { print_r($root-&gt;dump()); exit; } also, add this at the beginning of the file: use Todaymade\\Daux\\Tree\\Root; Let\u2019s just try if it works by running daux --processor=Processor Yes, you get a big array dump! You\u2019re good to go. #What can I achieve ? There are a few methods that you can override to add some #Change the parsed tree. By default, Daux.io parses your directory to find pages. but, for a reason or another, you might want to programmatically add some pages. This can be done with: public function manipulateTree(Root $root) { } Two helpers from the class Todaymade\\Daux\\Tree\\Builder will greatly help you doing that: $new = Builder::getOrCreateDir($root, 'New Pages'); $page = Builder::getOrCreatePage($new, 'index'); $page-&gt;setContent('The index page for the new folder'); $page = Builder::getOrCreatePage($new, 'A New Hope'); $page-&gt;setContent('A long time ago in a galaxy far away'); Both methods getOrCreateDir and getOrCreatePage take two parameters : parent and title The page will automatically be treated as markdown and converted like a normal page. If you create a new ContentType, like let\u2019s say LaTeX, you would set the title My Page.tex it will keep the title My Page and use your renderer. If the extension is not mapped to a Generator, it will simply create the file as-is without manipulation. #Extend the Markdown Generator You can extend the Markdown Parser in any way you want with this method. public function extendCommonMarkEnvironment(Environment $environment) { } See the details on CommonMark\u2019s website. #Add new generators You can add new generators to Daux.io and use them right away, they must implement the \\Todaymade\\Daux\\Format\\Base\\Generator interface and if you want to use the live mode with your generator you have to implement \\Todaymade\\Daux\\Format\\Base\\LiveGenerator. public function addGenerators() { return ['custom_generator' =&gt; '\\Todaymade\\Daux\\Extension\\MyNewGenerator']; }","tags":"","url":"For_Developers\/Creating_a_Processor.html"},{"title":"Creating a Theme","text":"In its simplest form, a theme is an empty folder with a config.json file containing {} After that, every setting is optional, but you can override everything if you\u2019d like to. Overriding styles If you want to tweak a few styles, you can create a style.css file at the root of your documentation directory and it will be included automatically. By doing this, you don\u2019t need to create a new theme. #config.json options Here is an example config.json file : { \"favicon\": \"&lt;theme_url&gt;img\/favicon.png\", \"css\": [\"&lt;theme_url&gt;css\/theme.min.css\"], \"js\": [], \"fonts\": [ \"https:\/\/fonts.googleapis.com\/css?family=Roboto+Slab:400,100,300,700&amp;subset=latin,cyrillic-ext,cyrillic\" ], \"variants\": { \"blue\": { \"favicon\": \"&lt;theme_url&gt;img\/favicon-blue.png\", \"css\": [\"&lt;theme_url&gt;css\/theme-blue.min.css\"] }, \"green\": { \"favicon\": \"&lt;theme_url&gt;img\/favicon-green.png\", \"css\": [\"&lt;theme_url&gt;css\/theme-green.min.css\"] } } } There are five options : favicon: The URL to your favicon css: An array of CSS Stylesheets to add to the page js: An array of JavaScript files to load fonts: An array of Font sources, these are added as stylesheets variants: An object containing sub-themes. Each sub theme, can provide the same configurations as the main theme (favicon, css, js, fonts) You will also notice this &lt;theme_url&gt; in the url. This is automatically substituted with the final url to the theme when generating the final page. There are two possible substitutions : &lt;theme_url&gt;: The url to the current theme &lt;base_url&gt;: The url to the documentation root #Theme variants Like the default Daux.io theme, you might want to provide variants of your theme. In the example before, there were two variants : blue and green. The configuration of a variant is added to the configuration of the main theme, it doesn\u2019t replace it. For example the main CSS files defined are: [&quot;&lt;theme_url&gt;css\/theme.min.css&quot;] and the green variant defines [&quot;&lt;theme_url&gt;css\/theme-green.min.css&quot;]. The final list of CSS files will be [&quot;&lt;theme_url&gt;css\/theme.min.css&quot;, &quot;&lt;theme_url&gt;css\/theme-green.min.css&quot;]. This doesn\u2019t apply to favicon, only the last value set is kept. #Setting the theme for your documentation In your documentation\u2019s config.json (not the theme\u2019s config.json) Change the theme option inside html { \"themes_directory\": \"\/home\/user\/themes\", \"html\": { \"theme\": \"{theme}-{variant}\" } } The name of the theme, is the folder name. You can use the themes_directory setting if you want to specify a custom location of your themes folder. A variant is optional, if you want to add one, separate it from the theme with a dash. #Overriding templates By default, you have a list of templates in templates You can create a folder named templates in your theme, copy-paste the original template in that folder, and you can modify it freely. You can even do it one template at a time if you wish to do only small changes. By default, we have the following templates : content.php: The content page. home.php: The landing page. error.php: The page to show when a page is not found or some other error happened. partials\/navbar_content.php: The content of the top navigation bar. partials\/google_analytics.php: The script to load Google Analytics. partials\/piwik_analytics.php: The script to load Piwik Analytics. layout\/00_layout.php: The master template, containing the &lt;html&gt; tag. layout\/05_page.php: The page layout, with left navigation.","tags":"","url":"For_Developers\/Creating_a_Theme.html"}]});